# Red-Nosed Reports

```elixir
Mix.install([{:kino, "~> 0.14.2"}])
```

## Input

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
input = Kino.Input.read(input)

reports =
  input
  |> String.trim()
  |> String.split("\n")
  |> Enum.map(fn x -> String.split(x) |> Enum.map(&String.to_integer/1) end)
```

```elixir
classify = fn report ->
  pairs = report |> Enum.chunk_every(2, 1, :discard)

  directions =
    Enum.map(pairs, fn
      [a, b] when a > b and a <= b + 3 -> :decrease
      [a, b] when a < b and b <= a + 3 -> :increase
      _ -> :error
    end)

  Enum.reduce(directions, fn
    :increase, :increase -> :increase
    :decrease, :decrease -> :decrease
    _, _ -> :error
  end)
end
```

```elixir
classify.([7, 6, 4, 2, 1])
```

```elixir
is_safe = fn report -> classify.(report) != :error end
```

## Part 1

```elixir
Enum.count(reports, is_safe)
```

## Part 2

```elixir
report = [1, 3, 2, 4, 5]
is_safe.(report)

is_safe.(List.delete_at(report, 2))
```

```elixir
unsafe_reports = reports |> Enum.reject(is_safe)

dampen = fn report ->
  Enum.reduce(0..Enum.count(report), is_safe.(report), fn
    n, false -> is_safe.(List.delete_at(report, n))
    _n, true -> true
  end)
end
```

```elixir
dampen.([4, 5, 4, 3, 2])
```

```elixir
Enum.count(reports, dampen)
```
